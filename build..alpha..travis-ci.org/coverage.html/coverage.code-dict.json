{"/home/travis/build/npmtest/node-npmtest-gcr/test.js":"/* istanbul instrument in package npmtest_gcr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gcr/lib.npmtest_gcr.js":"/* istanbul instrument in package npmtest_gcr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gcr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gcr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gcr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gcr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gcr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gcr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gcr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gcr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gcr.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gcr.__dirname +\n                    '/lib.npmtest_gcr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gcr/node_modules/gcr/lib/gcr.js":"var EventEmitter = require('events').EventEmitter\n  , gcr = new EventEmitter\n  , log = require('npmlog')\n  , fs = require('fs')\n  , nconf = require('nconf')\n  , mkdirp = require('mkdirp')\n  , path = require('path')\n  , home = require('os-homedir')()\n  , confFile = path.join(home, '.config', 'gcr.json')\n  , slide = require('slide')\n  , chain = slide.chain\n  , which = require('which')\n\nlog.heading = 'gcr'\n\nmodule.exports = gcr\n\ngcr.root = path.dirname(confFile)\ngcr.loaded = false\ngcr.version = require('../package').version\n\ngcr.utils = require('./utils')\n\ngcr.load = function(opts, cb) {\n  if ('function' === typeof opts) cb = opts, opts = {}\n  if (gcr.loaded) return cb()\n  mkdirp(gcr.root, function(err) {\n    log.resume()\n    if (err) {\n      err.heading = '[mkdirp]'\n      return cb(err)\n    }\n    nconf.file({ file: confFile })\n    nconf.defaults(require('./config.default')(opts))\n    if (opts.url) {\n      nconf.set('url', opts.url)\n    }\n    if (opts.token) {\n      nconf.set('token', opts.token)\n    }\n    if (opts.buildDir) {\n      nconf.set('buildDir', opts.buildDir)\n    }\n    if (opts.npm) {\n      nconf.set('npm', opts.npm)\n    }\n    if (opts.hasOwnProperty('strictSSL')) {\n      nconf.set('strictSSL', opts.strictSSL)\n    }\n    if (opts.timeout) {\n      nconf.set('timeout', opts.timeout)\n    }\n    if (!nconf.get('buildDir')) {\n      nconf.set('buildDir', '/tmp/builds')\n    }\n    if (opts.keypath) {\n      nconf.set('keypath', opts.keypath)\n    }\n    gcr.config = nconf\n    chain([\n        validateGit\n      , validateSetup\n      , saveConfig\n    ], cb)\n  })\n}\n\nfunction validateGit(cb) {\n  if (nconf.get('git')) return cb()\n  which('git', function(err, git) {\n    if (err) {\n      err.heading = '[which]'\n      return cb(err)\n    }\n    nconf.set('git', git)\n    cb()\n  })\n}\n\nfunction validateSetup(cb) {\n  mkdirp(gcr.config.get('buildDir'), function(err) {\n    if (err) {\n      err.heading = '[mkdirp]'\n      return cb && cb(err)\n    }\n    gcr.utils.maybeGenSSHKey(function(err) {\n      if (err) {\n        err.heading = '[ssh-keygen]'\n        return cb(err)\n      } else {\n        cb()\n      }\n    })\n  })\n}\n\nfunction saveConfig(cb) {\n  nconf.save(function() {\n    log.level = gcr.config.get('loglevel')\n    log.heading = gcr.config.get('heading') || 'gcr'\n    gcr.log = log\n    gcr.loaded = true\n    gcr.runner = require('./runner')()\n    gcr.client = require('./client')()\n    cb()\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-gcr/node_modules/gcr/lib/utils.js":"var log = require('npmlog')\n  , gcr = require('./gcr')\n  , exec = require('child_process').exec\n  , path = require('path')\n  , os = require('os')\n  , isWin = os.platform() === 'win32'\n  , fs = require('fs')\n  , utils = exports\n\nutils.genSSHKey = function(fp, cb) {\n  var k = isWin\n    ? 'ssh-keygen.exe'\n    : 'ssh-keygen'\n  var cmd = k + ' -t rsa -f ' + fp + ' -N \"\"'\n  exec(cmd, {\n    env: process.env\n  , cwd: process.cwd()\n  }, function(err, stdout, stderr) {\n    if (err) return cb && cb(err)\n    return cb && cb(null, stdout)\n  })\n}\n\nutils.maybeGenSSHKey = function maybeGenSSHKey(cb) {\n  var keypath = gcr.config.get('keypath')\n  fs.exists(keypath, function(e) {\n    if (e) return cb()\n    gcr.utils.genSSHKey(keypath, function(err) {\n      if (err) {\n        err.heading = '[ssh-keygen]'\n        return cb(err)\n      }\n      cb()\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-gcr/node_modules/gcr/lib/client.js":"var request = require('request')\n  , gcr = require('./gcr')\n  , util = require('util')\n  , log = require('npmlog')\n  , url = require('url')\n  , urlJoin = require('url-join')\n\nvar proxyServer = process.env.HTTPS_PROXY\n  || process.env.https_proxy\n  || process.env.HTTP_PROXY\n  || process.env.http_proxy\n\nif (proxyServer) {\n  request = request.defaults({ proxy: proxyServer })\n}\n\nmodule.exports = Client\n\nfunction Client() {\n  if (!(this instanceof Client))\n    return new Client()\n}\n\nClient.prototype.apiUrl = function() {\n  return gcr.config.get('url')\n}\n\nClient.prototype.updateBuild = function(id, state, trace, cb) {\n  var self = this\n  log.info('[client]', 'submitting build %d to coordinator...', id)\n  var opts = {\n    body: {\n      state: state\n    , trace: trace\n    , token: gcr.config.get('token')\n    }\n  , json: true\n  , strictSSL: gcr.config.get('strictSSL')\n  }\n\n  log.verbose('[client]', 'update build', id, state)\n  opts.uri = urlJoin( self.apiUrl()\n                    , util.format('/api/v1/builds/%d.json', id)\n                    )\n  log.http('PUT', opts.uri)\n  request.put(opts, function(err, res, body) {\n    if (err) return cb && cb(err)\n    if (res.statusCode === 200) {\n      log.http(200, opts.uri)\n      return cb && cb(null, true)\n    } else {\n      log.verbose('[response]', body)\n      log.http(res.statusCode, opts.uri)\n      return cb && cb(null, false)\n    }\n  })\n}\n\nClient.prototype.registerRunner = function(pubkey, token, cb) {\n  var self = this\n  var opts = {\n    body: {\n      public_key: pubkey\n    , token: token\n    }\n  , json: true\n  , strictSSL: gcr.config.get('strictSSL')\n  }\n\n  opts.uri = urlJoin(self.apiUrl(), '/api/v1/runners/register.json')\n  log.http('POST', opts.uri)\n  request.post(opts, function(err, res, body) {\n    if (err) return cb && cb(err)\n    if (res.statusCode === 201) {\n      log.http(201, body.token)\n      return cb && cb(null, body.token)\n    } else {\n      log.http(res.statusCode, opts.uri)\n      log.error('[client]', 'register runner', body)\n      return cb && cb(new Error('Invalid response'))\n    }\n  })\n}\n\nClient.prototype.getBuild = function(cb) {\n  var self = this\n  log.info('[client]', 'checking for builds...')\n\n  var opts = {\n    body: {\n      token: gcr.config.get('token')\n    }\n  , json: true\n  , strictSSL: gcr.config.get('strictSSL')\n  }\n\n  opts.uri = urlJoin(self.apiUrl(), '/api/v1/builds/register.json')\n  request.post(opts, function(err, res, body) {\n    if (err) return cb && cb(err)\n    log.http(res.statusCode, opts.uri)\n    if (res.statusCode === 201) {\n      var o = {\n        id: body.id\n      , project_id: body.project_id\n      , commands: body.commands.replace(/\\r\\n/g, '\\n').split('\\n')\n      , repo_url: body.repo_url\n      , ref: body.sha\n      , ref_name: body.before_sha\n      , allow_git_fetch: body.allow_git_fetch\n      , timeout: body.timeout\n      , variables: body.variables\n      }\n      return cb && cb(null, o)\n    } else if (res.statusCode === 403) {\n      log.error('[client]', 'Unable to get builds', 'forbidden')\n      return cb && cb(new Error('Unable to get builds'))\n    } else {\n      log.verbose('[client]', 'no builds found')\n      return cb && cb()\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-gcr/node_modules/gcr/lib/config.default.js":"var path = require('path')\n  , os = require('os')\n  , isWin = os.platform() === 'win32'\n  , homedir = require('os-homedir')\n\nmodule.exports = function(parsed) {\n  var o = {}\n  if (parsed.url) o.url = parsed.url\n  if (parsed.token) o.token = parsed.token\n  if (parsed.buildDir) o.buildDir = parsed.buildDir\n  if (parsed.npm) o.npm = parsed.npm\n  if (parsed.timeout) o.timeout = parsed.timeout\n  o.keypath = parsed.keypath\n    ? parsed.key\n    : isWin\n    ? path.join(homedir(), '.ssh', 'gcr')\n    : path.join(homedir(), '.ssh', 'gcr')\n  o.loglevel = parsed.loglevel || 'info'\n  o.strictSSL = parsed.hasOwnProperty('strictSSL')\n              ? parsed.strictSSL\n              : true\n  return o\n}\n","/home/travis/build/npmtest/node-npmtest-gcr/node_modules/gcr/lib/runner.js":"var gcr = require('./gcr')\n  , util = require('util')\n  , EventEmitter = require('events').EventEmitter\n  , log = require('npmlog')\n  , Build = require('./build')\n\nmodule.exports = Runner\n\nfunction Runner() {\n  if (!(this instanceof Runner))\n    return new Runner()\n  EventEmitter.call(this)\n  // { buildId: projectId }\n  this.builds = {}\n  // { buildId: buildData }\n  this.queue = {}\n  this.interval = null\n}\n\nutil.inherits(Runner, EventEmitter)\n\nRunner.prototype.start = function() {\n  var self = this\n  self.getBuild()\n  this.interval = setInterval(function() {\n    self.getBuild()\n  }, 5000)\n}\n\nRunner.prototype.projectIsRunning = function(id) {\n  var builds = Object.keys(this.builds)\n    , len = builds.length\n\n  for (var i=0; i<len; i++) {\n    var key = builds[i]\n    var proj = this.builds[key]\n    if (+proj === +id) return true\n  }\n\n  return false\n}\n\nRunner.prototype.getBuild = function() {\n  var self = this\n  gcr.client.getBuild(function(err, data) {\n    if (err) {\n      log.error('[runner]', 'error getting builds', err)\n      return\n    }\n    if (!data) return\n    var buildId = data.id\n    var projectId = data.project_id\n    if (self.projectIsRunning(projectId)) {\n      // We are already running a build for this project\n      // queue it\n      self.queue[buildId] = data\n    } else {\n      // Go ahead and start the build\n      self.runBuild(data)\n    }\n  })\n}\n\nRunner.prototype.checkQueue = function() {\n  var self = this\n  var queue = this.queue\n  var queuedProjects = Object.keys(queue).map(function(build) {\n    return queue[build]\n  })\n  queuedProjects.forEach(function(proj) {\n    if (self.projectIsRunning(proj.project_id)) {\n      // We are already running a build for this project\n      // It is already queued so do nothing\n      return\n    }\n    self.runBuild(proj)\n    delete self.queue[proj.id]\n  })\n}\n\nRunner.prototype.runBuild = function(data) {\n  var self = this\n  this.builds[data.id] = data.project_id\n  var build = new Build(data)\n  build.on('done', function(success) {\n    if (success) {\n      log.info('[runner]', 'build success [%s]', build.opts.id)\n    } else {\n      log.error('[runner]', 'build failed [%s]', build.opts.id)\n    }\n    // cleanup\n    delete self.builds[build.opts.id]\n    delete build\n    self.checkQueue()\n  })\n  build.run()\n}\n","/home/travis/build/npmtest/node-npmtest-gcr/node_modules/gcr/lib/build.js":"var gcr = require('./gcr')\n  , spawn = require('child_process').spawn\n  , rimraf = require('rimraf')\n  , slide = require('slide')\n  , chain = slide.chain\n  , fs = require('fs')\n  , log = require('npmlog')\n  , path = require('path')\n  , util = require('util')\n  , mkdirp = require('mkdirp')\n  , argsplit = require('argsplit')\n  , EE = require('events').EventEmitter\n\nmodule.exports = Build\n\nfunction Build(opts) {\n  if (!(this instanceof Build))\n    return new Build(opts)\n\n  EE.call(this)\n  this.git = gcr.config.get('git')\n  this.buildDir = gcr.config.get('buildDir')\n  opts.commands = opts.commands || []\n  opts.timeout = +(gcr.config.get('timeout') || opts.timeout || 5000) * 1000\n  this.opts = opts\n  this.output = ''\n  this.projectDir = path.join(this.buildDir, 'project-'+opts.project_id)\n  this.state = 'waiting'\n}\n\nutil.inherits(Build, EE)\n\nBuild.prototype.run = function() {\n  this.state = 'running'\n  var self = this\n  this.shouldClone(function(should) {\n    if (!should) {\n      self.fetch(function(err) {\n        if (err) return self.emit('done', false)\n        runCommand(0)\n      })\n    } else {\n      rimraf(self.projectDir, function(err) {\n        if (err) {\n          self.state = 'failed'\n          self.update(function() {\n            self.emit('done', false)\n          })\n          return\n        }\n        self.clone(function(err) {\n          if (err) return self.emit('done', false)\n          runCommand(0)\n        })\n      })\n    }\n  })\n\n  var cmds = this.opts.commands\n  var len = cmds.length\n  var dir = this.projectDir\n  function runCommand(idx) {\n    if (idx < len) {\n      log.verbose('[build]', 'running command', idx+1, 'of', len)\n      var cmd = cmds[idx]\n      self.runCommand(cmd, dir, function(err) {\n        if (err) return self.emit('done', false)\n        runCommand(idx+1)\n      })\n    } else {\n      self.state = 'success'\n      self.update(function() {\n        self.emit('done', true)\n      })\n    }\n  }\n}\n\nBuild.prototype.clone = function(cb) {\n  var self = this\n  var cmd = ['clone', this.opts.repo_url, 'project-'+this.opts.project_id]\n  var dir = this.projectDir\n  this.gitCommand(cmd, this.buildDir, function(err) {\n    if (err) return cb && cb(err)\n    self.gitCommand(['checkout', self.opts.ref], dir, cb)\n  })\n}\n\nBuild.prototype.fetch = function(cb) {\n  var self = this\n\n  var dir = this.projectDir\n  var repoUrl = this.opts.repo_url\n\n  function resetHard(cb) {\n    self.gitCommand(['reset', '--hard'], dir, cb)\n  }\n\n  function clean(cb) {\n    self.gitCommand(['clean', '-fdx'], dir, cb)\n  }\n\n  function setOrigin(cb) {\n    self.gitCommand( ['remote', 'set-url', 'origin', repoUrl]\n                   , dir\n                   , cb\n                   )\n  }\n\n  function fetchOrigin(cb) {\n    self.gitCommand(['fetch', 'origin'], dir, cb)\n  }\n\n  function checkout(cb) {\n    self.gitCommand(['checkout', self.opts.ref], dir, cb)\n  }\n\n  chain([\n    resetHard\n  , clean\n  , setOrigin\n  , fetchOrigin\n  , checkout\n  ], cb)\n}\n\nBuild.prototype.shouldClone = function(cb) {\n  var self = this\n  var d = path.join(this.projectDir, '.git')\n  fs.exists(d, function(e) {\n    if (!e) return cb(true)\n    return cb(!self.opts.allow_git_fetch)\n  })\n}\n\nBuild.prototype.append = function(str) {\n  this.output += str\n}\n\nBuild.prototype.runCommand = function(cmd, dir, cb) {\n  var self = this\n  if ('function' === typeof dir) cb = dir, dir = process.cwd()\n  var env = {\n    CI_SERVER: true\n  , CI_SERVER_NAME: 'GitLab CI'\n  , CI_SERVER_VERSION: null\n  , CI_SERVER_REVISION: null\n  , CI_BUILD_REF: this.opts.ref\n  , CI_BUILD_BEFORE_SHA: this.opts.before_sha\n  , CI_BUILD_REF_NAME: this.opts.ref_name\n  , CI_BUILD_ID: this.opts.id\n  }\n\n  if (this.opts.variables && this.opts.variables.length) {\n    this.opts.variables.forEach(function(variable) {\n      env[variable.key] = variable.value\n    })\n  }\n\n  util._extend(env, process.env)\n\n  var opts = {\n    env: env\n  , cwd: dir\n  , timeout: this.opts.timeout\n  }\n\n  var fixedCmd = cmd\n  if (!Array.isArray(cmd)) {\n    fixedCmd = argsplit(cmd)\n  }\n\n  log.verbose('[builder]', 'cmd', cmd)\n  this.append(util.format('\\n%s\\n', cmd))\n\n  var child = spawn('/bin/bash', ['-c', fixedCmd.join(' ')], opts)\n  var timedout = false\n  var timer = setTimeout(function() {\n    timedout = true\n    child.kill()\n    self.append('\\n** TIMEOUT **\\n')\n  }, this.opts.timeout)\n  child.stderr.on('data', function(d) {\n    var data = d.toString()\n    log.silly('[builder]', 'stderr', data)\n    self.append(data)\n  })\n  child.stdout.on('data', function(d) {\n    var data = d.toString()\n    log.silly('[builder]', 'stdout', data)\n    self.append(data)\n  })\n  child.on('close', function(code) {\n    if (timer) {\n      clearTimeout(timer)\n      timer = null\n    }\n    if (code !== 0) {\n      var msg = timedout\n        ? 'process timedout'\n        : 'process exited with code: '+code\n      var e = new Error(msg)\n      self.append(util.format(\n        'Command: [%s] exited with code: %d timedout: %s', cmd, code,\n          timedout ? 'yes' : 'no'\n      ))\n      e.command = cmd\n      e.opts = opts\n      self.state = 'failed'\n      self.update(function() {\n        cb && cb(e)\n      })\n      return\n    }\n    self.update(function() {\n      cb && cb()\n    })\n  })\n}\n\nBuild.prototype.gitCommand = function(cmd, dir, cb) {\n  var self = this\n  if ('function' === typeof dir) cb = dir, dir = process.cwd()\n  var env = {\n    CI_SERVER: true\n  , CI_SERVER_NAME: 'GitLab CI'\n  , CI_SERVER_VERSION: null\n  , CI_SERVER_REVISION: null\n  , CI_BUILD_REF: this.opts.ref\n  , CI_BUILD_BEFORE_SHA: this.opts.before_sha\n  , CI_BUILD_REF_NAME: this.opts.ref_name\n  , CI_BUILD_ID: this.opts.id\n  }\n\n  if (this.opts.variables && this.opts.variables.length) {\n    this.opts.variables.forEach(function(variable) {\n      env[variable.key] = variable.value\n    })\n  }\n\n  util._extend(env, process.env)\n\n  var opts = {\n    env: env\n  , cwd: dir\n  , timeout: this.opts.timeout\n  }\n\n  log.verbose('[builder]', 'cmd', cmd)\n  self.append(util.format('\\n%s %s\\n', self.git, cmd.join(' ')))\n  var child = spawn(this.git, cmd, opts)\n  var timedout = false\n  var timer = setTimeout(function() {\n    timedout = true\n    child.kill()\n    self.append('\\n** TIMEOUT **\\n')\n  }, this.opts.timeout)\n  child.stderr.on('data', function(d) {\n    var data = d.toString()\n    log.silly('[builder]', 'stderr', data)\n    self.append(data)\n  })\n  child.stdout.on('data', function(d) {\n    var data = d.toString()\n    log.silly('[builder]', 'stdout', data)\n    self.append(data)\n  })\n  child.on('exit', function(code) {\n    if (timer) {\n      clearTimeout(timer)\n      timer = null\n    }\n    if (code !== 0) {\n      var msg = timedout\n        ? 'process timedout'\n        : 'process exited with code: '+code\n      var e = new Error(msg)\n      self.append(util.format(\n        'Command: [%s %s] exited with code: %d timedout: %s', self.git,\n          cmd.join(' '), code, timedout ? 'yes' : 'no'\n      ))\n      e.command = cmd\n      e.opts = opts\n      self.state = 'failed'\n      self.update(function() {\n        cb && cb(e)\n      })\n      return\n    }\n    self.update(function() {\n      cb && cb()\n    })\n  })\n}\n\nBuild.prototype.update = function(cb) {\n  var id = this.opts.id\n  gcr.client.updateBuild(id, this.state, this.output, cb)\n}\n"}